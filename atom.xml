<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Wnavy - Blog]]></title>
  <subtitle><![CDATA[IOS & Android]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://w11h22j33.github.io/myblog//"/>
  <updated>2014-04-08T02:07:12.663Z</updated>
  <id>http://w11h22j33.github.io/myblog//</id>
  
  <author>
    <name><![CDATA[wang navy]]></name>
    <email><![CDATA[navy.zy@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[分析神码 IOS Crash Log]]></title>
    <link href="http://w11h22j33.github.io/myblog/2014/04/08/ioscrashlog/"/>
    <id>http://w11h22j33.github.io/myblog/2014/04/08/ioscrashlog/</id>
    <published>2014-04-08T01:55:45.000Z</published>
    <updated>2014-04-08T02:06:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="一、WHY_CRASH？ios应用crash的四种类型">一、WHY CRASH？ios应用crash的四种类型</h1>
<p>1、程序崩溃: 经常发生于内存访问出错,或者其他的程序错误，常见原因：</p>
<ul>
<li>访问某个对象不存在的属性。</li>
<li>访问已经被dealloc的对象。</li>
<li>多线程操作数组，在一个线程里快速遍历某个数组，但在另一个线程里往数组里添加对象。</li>
<li>往字典里用setObject 方法添加一个值为nil的键值对。</li>
</ul>
<p>2、内存不足: 系统因为没有足够的内存满足程序需求从而杀死程序出现这种日志.它不同于其他日志的是它没有程序各线程的堆栈信息。怎么办呢？ </p>
<ul>
<li>管理好自己的内存，在此不做细述；</li>
<li>处理系统内存警告。app收到Memory Warning后会调用：<br>UIApplication::didReceiveMemoryWarning -&gt; UIApplicationDelegate::applicationDidReceiveMemoryWarning -&gt; 调用当前所有的 viewController进行处理。<br>因此处理的主要工作是在viewController。</li>
</ul>
<p>3、强制退出:异常代码 0xdeadfa11. 这出现在用户在程序界面按下关机键直到出现”移动滑块关机”,然后长按Home键.用户之所以这么做,很可能因为你的程序无响应,当然也不一定.</p>
<p>4、响应超时: 异常代码 0x8badf00d。避免阻塞主线程。</p>
<h1 id="二、WHERE_CRASH">二、WHERE CRASH</h1>
<p> iPhone真机上Crash文件的存储路径为：/var/mobile/Library/Logs/CrashReporter<br>      我们可以从xcode的organizer的device log中获取指定应用的crash信息文件<br>      选中我们关注的应用app，找到关心的异常时间的crash记录，点击右键，选择”Reveal Log in Finder”保存到dSYM文件目录下。</p>
<h1 id="三、WHEN_CRASH">三、WHEN CRASH</h1>
<ul>
<li><p>任何语言都有异常的处理机制，Objective-C也不例外。与C++/Java类似的语法，它也提供@try, @catch, @throw, @finally关键字。</p>
</li>
<li><p>同时对于系统Crash而引起的程序异常退出，可以通过UncaughtExceptionHandler机制捕获；也就是说在程序中catch以外的内容，被系统自带的错误处理而捕获。我们要做的就是用自定义的函数替代该ExceptionHandler即可。</p>
</li>
</ul>
<p><a href="http://blog.csdn.net/jaywon/article/details/7459064" target="_blank">详见：获取普通用户 iOS 设备上的 Crash Log 的方法</a></p>
<h1 id="四、How_to_Analyse_Crash_Log">四、How to Analyse Crash Log</h1>
<ul>
<li><p>借助Xcode</p>
</li>
<li><p>手动运行symbolicatecrash工具</p>
</li>
</ul>
<blockquote>
<p>需要三个东西，第一,crash文件，第二，symbolicatecrash，第三，dysm和app文件<br>.</p>
<ol>
<li>在桌面创建一个临时文件夹,如crash<br>.</li>
<li>首先要从设备中导出crash文件,最简单直接的办法是设备连接到mac上，打开xcode的organizer，然后选择其顶端选中devices，在左边的列表里，就能显示出当前连接的设备信息，选择当前设备下的device logs，等待片刻，中间的列表里会出现很多panic的信息，按照时间排序可以找到最近崩溃的crash，然后右键导出此文件.文件名自动保存为.crash文件，形如: xxx<em>2013-08-15-200743</em>-iPad.crash, 将这个文件拷入第一步创建的临时文件夹。<br>.</li>
<li>symbolicatecrash是xcode自带的工具，为了方便调用，可以做一个快捷方式，方便在任意路径下调用。<br>首先在termail下，输入find /Applications/Xcode.app -name symbolicatecrash -type f，用来查找symbolicatecrash的真实位置，<br>一般情况下，会返回如下路径<br>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKit.framework/Versions/A/Resources/symbolicatecrash<br>.<br>下一步建立快捷方式<br>sudo ln -s “/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKit.framework/Versions/A/Resources/symbolicatecrash”  /usr/local/bin/symbolicatecrash<br>.<br>3.dysm文件存在于最后发包的机器上，使用打开xcode的organizer,选择顶部的archives，看到最后的发包记录，选择distribute保存为相应的archive文件，查看包内容，里面有我们需要的.dSYM文件<br>.<br>app文件用刚才同样的方法，dictribute保存为ipa文件，把文件名扩展名改为zip，解压后可以得到最后的app文件。将这两个文件拷入第一步创建的临时文件夹备用<br>.<br>万事俱备，只差最后一步，termail下进入第一步创建的临时文件夹，<br>.<br>使用命令 symbolicatecrash xxxx.crash  xxxx.dsym &gt; crash.text   将最后分析出来的文件保存在crash.txt文件中<br>.<br>形如 symbolicatecrash xxx_2013-08-15-200743_iPad.crash xxxx.app.dSYM &gt;crash.txt<br>.<br>注意，一般情况下，第一次使用symbolicatecrash会产生一个error，如下的错误信息。<br>.<br>Error: “DEVELOPER_DIR” is not defined at /usr/local/bin/symbolicatecrash line 53.<br>解决办法是输入export DEVELOPER_DIR=”/Applications/XCode.app/Contents/Developer</li>
</ol>
</blockquote>
<h6 id="然后，然后神码现出原形啦！">然后，然后神码现出原形啦！</h6>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[第一篇]]></title>
    <link href="http://w11h22j33.github.io/myblog/2014/03/16/20140316/"/>
    <id>http://w11h22j33.github.io/myblog/2014/03/16/20140316/</id>
    <published>2014-03-16T09:18:45.000Z</published>
    <updated>2014-03-16T14:46:40.000Z</updated>
    <content type="html"><![CDATA[<p>最近常看一些优秀的博客，每一位作者都在自己的田地里书写着工作、生活的感悟。</p>
<p>之前也想写一些，但是没有坚持下来，也许是由于不完全是自己的田地吧，打理的积极性不高。</p>
<p>在阅读中看到有一句“读是为了写，学是为了用”，所以还得写，不写不做不总结，就不能真正进步不能真正成长。</p>
<p>觉得也该在网络世界中有自己的一块田地了，看了大家都在github上建博客，这是适合广大码农的自留地。</p>
<p>然后选个博客引擎，<a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/" target="_blank">Octopress</a> ？ <a href="http://yangjian.me/workspace/building-blog-with-hexo/" target="_blank">Hexo</a> <a href="http://hexo.io/" target="_blank">官网</a></p>
<p>为什么选用Hexo？简单、快速。</p>
<p>具体的使用步骤就不细说了，教程一大堆，在这里只提三点：</p>
<ul>
<li>新建repository时，名称一定要是：yourgithubaccount.github.io；</li>
<li>在编辑_config.yml时注意每个字段的:后要加一个空格，否则会解析错误；</li>
<li>本地查看效果可以使用命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo s </li>
</ul>
<p><a href="http://zipperary.com/2013/05/22/introduction-to-markdown/" target="_blank">Markdown指南</a></p>
<p>顺便提一下强大的编辑器</p>
<ul>
<li><p><a href="http://www.sublimetext.com/" target="_blank">sublimetext</a>,支持Markdown。</p>
</li>
<li><p><a href="http://mouapp.com/" target="_blank">Mou</a><img src="http://mouapp.com/Mou_128.png" alt=""></p>
</li>
<li><p>chrome插件<a href="https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog" target="_blank">MaDe</a>（这个插件图标很震撼）</p>
</li>
<li><p>在线编辑器<a href="http://mahua.jser.me/" target="_blank">http://mahua.jser.me/</a> <img src="http://mahua.jser.me/mahua-logo.jpg" alt=""></p>
</li>
</ul>
<p><img src="http://res-blog.qiniudn.com/errno-404" alt=""></p>
]]></content>
    
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to My Blog]]></title>
    <link href="http://w11h22j33.github.io/myblog/2014/03/16/hello-world/"/>
    <id>http://w11h22j33.github.io/myblog/2014/03/16/hello-world/</id>
    <published>2014-03-16T08:21:44.000Z</published>
    <updated>2014-03-16T09:13:30.000Z</updated>
    <content type="html"><![CDATA[<p>哈哈哈，果然很好用的博客哦！<a href="http://github.com/w11h22j33" target="_blank">w11h22j33</a></p>
]]></content>
    
    
  </entry>
  
</feed>
